run:
  build-tags:
    - e2e
linters-settings:
  gofmt:
    simplify: false
  # errcheck:
  #   # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
  #   # default is false: such cases aren't reported by default.
  #   check-type-assertions: false
  #
  #   # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
  #   # default is false: such cases aren't reported by default.
  #   check-blank: false
  #
  #   # [deprecated] comma-separated list of pairs of the form pkg:regex
  #   # the regex is used to ignore names within pkg. (default "fmt:.*").
  #   # see https://github.com/kisielk/errcheck#the-deprecated-method for details
  #   ignore: fmt:.*,io/ioutil:^Read.*
  #
  #   # path to a file containing a list of functions to exclude from checking
  #   # see https://github.com/kisielk/errcheck#excluding-functions for details
  #   exclude: /path/to/file.txt
  # gocyclo:
  #   # minimal code complexity to report, 30 by default (but we recommend 10-20)
  #   min-complexity: 10
  # maligned:
  #   # print struct with more effective memory layout or not, false by default
  #   suggest-new: true
  # dupl:
  #   # tokens count to trigger issue, 150 by default
  #   threshold: 100
  # goconst:
  #   # minimal length of string constant, 3 by default
  #   min-len: 3
  #   # minimal occurrences count to trigger, 3 by default
  #   min-occurrences: 3
  # depguard:
  #   list-type: blacklist
  #   include-go-root: false
  #   packages:
  #     - github.com/davecgh/go-spew/spew
  lll:
    line-length: 120
  # unused:
  #   # treat code as a program (not a library) and report unused exported identifiers; default is false.
  #   # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
  #   # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
  #   # with golangci-lint call it on a directory with the changed file.
  #   check-exported: false
  # unparam:
  #   # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
  #   # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
  #   # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
  #   # with golangci-lint call it on a directory with the changed file.
  #   check-exported: false
  # nakedret:
  #   # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
  #   max-func-lines: 30
  # prealloc:
  #   # XXX: we don't recommend using this linter before doing performance profiling.
  #   # For most programs usage of prealloc will be a premature optimization.
  #
  #   # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
  #   # True by default.
  #   simple: true
  #   range-loops: true # Report preallocation suggestions on range loops, true by default
  #   for-loops: false # Report preallocation suggestions on for loops, false by default
  # gocritic:
  #   # Which checks should be enabled; can't be combined with 'disabled-checks';
  #   # See https://go-critic.github.io/overview#checks-overview
  #   # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
  #   # By default list of stable checks is used.
  #   enabled-checks:
  #     - rangeValCopy
  #
  #   # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
  #   disabled-checks:
  #     - regexpMust
  #
  #   # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
  #   # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
  #   enabled-tags:
  #     - performance
  #
  #   settings: # settings passed to gocritic
  #     captLocal: # must be valid enabled check name
  #       paramsOnly: true
  #     rangeValCopy:
  #       sizeThreshold: 32

linters:
  enable-all: true
  disable:
    - gochecknoinits
    - gochecknoglobals
    - interfacer
