syntax = "proto3";
package example;

service Example {
  // A+-----+
  // ^      v
  // +-----+B
  rpc Request (A) returns (B) {}

  // Foo+-->Self+-+
  //         ^    |
  //         +----+
  rpc Request2 (Foo) returns (B) {}


  // Hoge+-->Fuga+-->Piyo
  //  ^                +
  //  |                |
  //  +----------------+
  rpc Request3 (Hoge) returns (B) {}

  //     oneof
  // C+-------->ListC
  // ^             +
  // |   repeated  |
  // +-------------+
  rpc Request4 (C) returns (B) {}
  rpc Request5 (D) returns (B) {}
  rpc Request6 (E) returns (B) {}
  rpc Foo(FooRequest) returns (FooResponse);
}

message A {
  B b = 1;
}

message B {
  A a = 1;
}

message Foo {
  Self self = 1;
}

message Self {
  string hoge = 1;
  Self self = 2;
}

message Hoge {
  Fuga fuga = 1;
  string dummy1 = 2;
}

message Fuga {
  Piyo piyo = 1;
  string dummy2 = 2;
}

message Piyo {
  Hoge hoge = 1;
  string dummy3 = 2;
}

message C {
  oneof oneof {
    ListC list = 1;
    string str = 2;
  }
}

message ListC {
  repeated C a = 1;
}

message D {
  map<string, C> m = 1;
}

// field m1 and m2 have the same structure.
message E {
  map<string, F> m1 = 1;

  message M {
    string key = 1;
    F val = 2;
  }
  repeated M m2 = 2;
}

message F {
  E e = 1;
}

message Filters {
    string name = 1;
    repeated Filters and = 2;
    repeated Filters or = 3;
}

message FooRequest {
    Filters filters = 1;
    int32 page = 2;
    int32 limit = 3;
}

message FooResponse {
    repeated string names = 1;
}

message G {
  H h = 1;
  H h2 = 2;
}

message H {}

message I {
  H h = 1;
  J j = 2;
}

message J {
  H h = 1;
}
