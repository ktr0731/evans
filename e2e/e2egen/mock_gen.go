// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"github.com/ktr0731/evans/prompt"
	"sync"
)

var (
	lockPromptMockGetCommandHistory sync.RWMutex
	lockPromptMockInput             sync.RWMutex
	lockPromptMockSelect            sync.RWMutex
	lockPromptMockSetCompleter      sync.RWMutex
	lockPromptMockSetPrefix         sync.RWMutex
	lockPromptMockSetPrefixColor    sync.RWMutex
)

// Ensure, that PromptMock does implement Prompt.
// If this is not the case, regenerate this file with moq.
var _ prompt.Prompt = &PromptMock{}

// PromptMock is a mock implementation of Prompt.
//
//     func TestSomethingThatUsesPrompt(t *testing.T) {
//
//         // make and configure a mocked Prompt
//         mockedPrompt := &PromptMock{
//             GetCommandHistoryFunc: func() []string {
// 	               panic("mock out the GetCommandHistory method")
//             },
//             InputFunc: func() (string, error) {
// 	               panic("mock out the Input method")
//             },
//             SelectFunc: func(message string, options []string) (string, error) {
// 	               panic("mock out the Select method")
//             },
//             SetCompleterFunc: func(c prompt.Completer)  {
// 	               panic("mock out the SetCompleter method")
//             },
//             SetPrefixFunc: func(prefix string)  {
// 	               panic("mock out the SetPrefix method")
//             },
//             SetPrefixColorFunc: func(color prompt.Color)  {
// 	               panic("mock out the SetPrefixColor method")
//             },
//         }
//
//         // use mockedPrompt in code that requires Prompt
//         // and then make assertions.
//
//     }
type PromptMock struct {
	// GetCommandHistoryFunc mocks the GetCommandHistory method.
	GetCommandHistoryFunc func() []string

	// InputFunc mocks the Input method.
	InputFunc func() (string, error)

	// SelectFunc mocks the Select method.
	SelectFunc func(message string, options []string) (string, error)

	// SetCompleterFunc mocks the SetCompleter method.
	SetCompleterFunc func(c prompt.Completer)

	// SetPrefixFunc mocks the SetPrefix method.
	SetPrefixFunc func(prefix string)

	// SetPrefixColorFunc mocks the SetPrefixColor method.
	SetPrefixColorFunc func(color prompt.Color)

	// calls tracks calls to the methods.
	calls struct {
		// GetCommandHistory holds details about calls to the GetCommandHistory method.
		GetCommandHistory []struct {
		}
		// Input holds details about calls to the Input method.
		Input []struct {
		}
		// Select holds details about calls to the Select method.
		Select []struct {
			// Message is the message argument value.
			Message string
			// Options is the options argument value.
			Options []string
		}
		// SetCompleter holds details about calls to the SetCompleter method.
		SetCompleter []struct {
			// C is the c argument value.
			C prompt.Completer
		}
		// SetPrefix holds details about calls to the SetPrefix method.
		SetPrefix []struct {
			// Prefix is the prefix argument value.
			Prefix string
		}
		// SetPrefixColor holds details about calls to the SetPrefixColor method.
		SetPrefixColor []struct {
			// Color is the color argument value.
			Color prompt.Color
		}
	}
}

// GetCommandHistory calls GetCommandHistoryFunc.
func (mock *PromptMock) GetCommandHistory() []string {
	if mock.GetCommandHistoryFunc == nil {
		panic("PromptMock.GetCommandHistoryFunc: method is nil but Prompt.GetCommandHistory was just called")
	}
	callInfo := struct {
	}{}
	lockPromptMockGetCommandHistory.Lock()
	mock.calls.GetCommandHistory = append(mock.calls.GetCommandHistory, callInfo)
	lockPromptMockGetCommandHistory.Unlock()
	return mock.GetCommandHistoryFunc()
}

// GetCommandHistoryCalls gets all the calls that were made to GetCommandHistory.
// Check the length with:
//     len(mockedPrompt.GetCommandHistoryCalls())
func (mock *PromptMock) GetCommandHistoryCalls() []struct {
} {
	var calls []struct {
	}
	lockPromptMockGetCommandHistory.RLock()
	calls = mock.calls.GetCommandHistory
	lockPromptMockGetCommandHistory.RUnlock()
	return calls
}

// Input calls InputFunc.
func (mock *PromptMock) Input() (string, error) {
	if mock.InputFunc == nil {
		panic("PromptMock.InputFunc: method is nil but Prompt.Input was just called")
	}
	callInfo := struct {
	}{}
	lockPromptMockInput.Lock()
	mock.calls.Input = append(mock.calls.Input, callInfo)
	lockPromptMockInput.Unlock()
	return mock.InputFunc()
}

// InputCalls gets all the calls that were made to Input.
// Check the length with:
//     len(mockedPrompt.InputCalls())
func (mock *PromptMock) InputCalls() []struct {
} {
	var calls []struct {
	}
	lockPromptMockInput.RLock()
	calls = mock.calls.Input
	lockPromptMockInput.RUnlock()
	return calls
}

// Select calls SelectFunc.
func (mock *PromptMock) Select(message string, options []string) (string, error) {
	if mock.SelectFunc == nil {
		panic("PromptMock.SelectFunc: method is nil but Prompt.Select was just called")
	}
	callInfo := struct {
		Message string
		Options []string
	}{
		Message: message,
		Options: options,
	}
	lockPromptMockSelect.Lock()
	mock.calls.Select = append(mock.calls.Select, callInfo)
	lockPromptMockSelect.Unlock()
	return mock.SelectFunc(message, options)
}

// SelectCalls gets all the calls that were made to Select.
// Check the length with:
//     len(mockedPrompt.SelectCalls())
func (mock *PromptMock) SelectCalls() []struct {
	Message string
	Options []string
} {
	var calls []struct {
		Message string
		Options []string
	}
	lockPromptMockSelect.RLock()
	calls = mock.calls.Select
	lockPromptMockSelect.RUnlock()
	return calls
}

// SetCompleter calls SetCompleterFunc.
func (mock *PromptMock) SetCompleter(c prompt.Completer) {
	if mock.SetCompleterFunc == nil {
		panic("PromptMock.SetCompleterFunc: method is nil but Prompt.SetCompleter was just called")
	}
	callInfo := struct {
		C prompt.Completer
	}{
		C: c,
	}
	lockPromptMockSetCompleter.Lock()
	mock.calls.SetCompleter = append(mock.calls.SetCompleter, callInfo)
	lockPromptMockSetCompleter.Unlock()
	mock.SetCompleterFunc(c)
}

// SetCompleterCalls gets all the calls that were made to SetCompleter.
// Check the length with:
//     len(mockedPrompt.SetCompleterCalls())
func (mock *PromptMock) SetCompleterCalls() []struct {
	C prompt.Completer
} {
	var calls []struct {
		C prompt.Completer
	}
	lockPromptMockSetCompleter.RLock()
	calls = mock.calls.SetCompleter
	lockPromptMockSetCompleter.RUnlock()
	return calls
}

// SetPrefix calls SetPrefixFunc.
func (mock *PromptMock) SetPrefix(prefix string) {
	if mock.SetPrefixFunc == nil {
		panic("PromptMock.SetPrefixFunc: method is nil but Prompt.SetPrefix was just called")
	}
	callInfo := struct {
		Prefix string
	}{
		Prefix: prefix,
	}
	lockPromptMockSetPrefix.Lock()
	mock.calls.SetPrefix = append(mock.calls.SetPrefix, callInfo)
	lockPromptMockSetPrefix.Unlock()
	mock.SetPrefixFunc(prefix)
}

// SetPrefixCalls gets all the calls that were made to SetPrefix.
// Check the length with:
//     len(mockedPrompt.SetPrefixCalls())
func (mock *PromptMock) SetPrefixCalls() []struct {
	Prefix string
} {
	var calls []struct {
		Prefix string
	}
	lockPromptMockSetPrefix.RLock()
	calls = mock.calls.SetPrefix
	lockPromptMockSetPrefix.RUnlock()
	return calls
}

// SetPrefixColor calls SetPrefixColorFunc.
func (mock *PromptMock) SetPrefixColor(color prompt.Color) {
	if mock.SetPrefixColorFunc == nil {
		panic("PromptMock.SetPrefixColorFunc: method is nil but Prompt.SetPrefixColor was just called")
	}
	callInfo := struct {
		Color prompt.Color
	}{
		Color: color,
	}
	lockPromptMockSetPrefixColor.Lock()
	mock.calls.SetPrefixColor = append(mock.calls.SetPrefixColor, callInfo)
	lockPromptMockSetPrefixColor.Unlock()
	mock.SetPrefixColorFunc(color)
}

// SetPrefixColorCalls gets all the calls that were made to SetPrefixColor.
// Check the length with:
//     len(mockedPrompt.SetPrefixColorCalls())
func (mock *PromptMock) SetPrefixColorCalls() []struct {
	Color prompt.Color
} {
	var calls []struct {
		Color prompt.Color
	}
	lockPromptMockSetPrefixColor.RLock()
	calls = mock.calls.SetPrefixColor
	lockPromptMockSetPrefixColor.RUnlock()
	return calls
}
